#! /bin/sh
### BEGIN INIT INFO
# Provides:          aspsms-t jabber transport-service
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: aspsms-t - daemon to send sms using jabber
# Description:       sending sms using aspsms with jabber 
#                    
### END INIT INFO

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="aspsms jabber transport"
NAME=aspsms-t
STARTDIR=/usr/bin
DAEMON=$STARTDIR/$NAME
CONF="/etc/aspsms/aspsms-t.xml"
DAEMON_ARGS="-c $CONF"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Exit if the package is not installed
if [ ! -r "$CONF" ];
then
  echo "Please configure $CONF before you can start aspsms-t!"
  exit 0
fi

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
VERBOSE=1

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  RESULT=2
  if [ -f "$PIDFILE" ]; 
  then
    RUNNING=$(ps faux | grep "$(cat $PIDFILE)" | grep -v grep)
    echo
    if [ -z "$RUNNING" ];
    then
      echo "$PIDFILE does already exist, but $NAME does not seem to run 
already. i'm going to delete $PIDFILE and will proceed with the startup 
sequence." 
    else
      echo "$PIDFILE does already exist. $NAME seems to be running already."
      exit 1
    fi

  fi

# start-stop-daemon does not work in this case.
exec su - aspsms -c "cd $STARTDIR && $DAEMON $DAEMON_ARGS 2>&1 >/dev/null" \
  2>&1 > /dev/null &

[ "$?" -eq "0" ] && RESULT=0 || echo "couldn't start $NAME"
if [ "$RESULT" -eq "0" ];
then
  # aspsms needs some time to start
  sleep 1
  # get pid 
  PID=$(ps faux | grep "/usr/bin/perl $DAEMON $DAEMON_ARGS" | grep -v grep | awk '{print $2}')
  if [ -z "$PID" ];
  then
    echo "No process for $NAME found. It does not seem to me that $NAME has 
been started successfully"
    RESULT=2
  else
    echo $PID > $PIDFILE
  fi
fi
return $RESULT
}

#
# Function that stops the daemon/service
#
do_stop()
{
# Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
RETVAL="$?"
[ "$RETVAL" = 2 ] && return 2
# Wait for children to finish too if this is a daemon that forks
# and if the daemon is only ever run from this initscript.
# If the above conditions are not satisfied then add some other code
# that waits for the process to drop all resources that could be
# needed by services started subsequently.  A last resort is to
# sleep for some time.
start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
[ "$?" = 2 ] && return 2
# Many daemons don't delete their pidfiles when they exit.
rm -f $PIDFILE
return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
