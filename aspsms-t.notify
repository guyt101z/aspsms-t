#!/usr/bin/perl
# aspsms-t
# http://www.swissjabber.ch/
# https://github.com/micressor/aspsms-t
#
# Copyright (C) 2006-2012 Marco Balmer <marco@balmer.name>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

=head1 NAME


aspsms-t.notify - Delivery notification helper script for aspsms-t

=head1 DESCRIPTION

For each sms that you send with aspsms-t you may (optionally) get an
sms delivery notification.

How does this work:

aspsms-t send the sms to the gateway with an URL that will be connected, 
when a message is delivered.

This URL has the following syntax:
 http://www.domain.tld/aspsms/aspsms.notify?xml="<stream/>"
The stream contains information about the jabber user, which has sent the sms
and the coresponding sms status.

notify example

aspsms-t.notify?xml="notify,,,004179xyzx,,,$USERKEY,,,<Originator>,,,
<MessageData>"

twoway example

aspsms-t.notify?xml="twoway,,,004179xyzx,,,$USERKEY,,,<Originator>,,,
<MessageData>"


aspsms-t.notify uses this information from the stream and put it via jabber 
account (which is defined in aspsms-t.xml and aspsms-t.notify.xml)
to our transport which is listening at aspsms.domain.tld.

aspsms-t send the final delivery notification to the sending jabber user 
with FROM header: +4178XXXXXXX@aspsms.domain.tld.

=head1 ASPSMS-T WEB NOTIFICATION

=over 2

=item * Create a jabber account aspsms@domain.tld and update your aspsms-t.xml
and aspsms-t.notify.xml in section <notification/>

=item * Make aspsms-t.notify available over an url for example like this:

 $ cd /srv/www
 $ mkdir aspsms
 $ cp $SRC/aspsms-t.notify aspsms/

Apache configuration:

vim /etc/apache2/conf.d/aspsms-t

<Directory /home/www/website/aspsms>
  SetHandler perl-script
  PerlResponseHandler ModPerl::Registry
  PerlOptions +ParseHeaders
  Options +ExecCGI
  Order allow,deny
  Allow from all

</Directory>

=item * Test your installation:

http://www.domain.tld/aspsms/aspsms-t.notify

Output:
 <aspsms>
   <ident>aspsms-t</ident>
   <stream/>
   <reply>
     <status>No xml-stream found</status>
   </reply>
 </aspsms>

means: Configuration is ok!

Please check also section main() in this manpage.

=back

=head1 SEE ALSO

aspsms-t(1)

=head1 AUTHORS

Written by Marco Balmer

=head1 RESOURCES

http://github.com/micressor/aspsms-t/
http://www.aspsms.com/documentation/

=head1 METHODS

=cut

#use lib "./"; # For development only

use CGI qw(:standard);
use Sys::Syslog;
use strict;
use Net::Jabber qw(Client);
use XML::Smart;

# Variables --------------------------------------------------------------------

=head2 main()

Please set the path to the configuration file.
Important: Absolut path! Or relative to the web directory.
Example: /home/jabber/aspsms-t/etc/aspsms-web-notify.xml

my $config_file = "/etc/aspsms/aspsms-t.xml";

=cut

my $config_file = "/etc/aspsms/aspsms-t.xml";

my (	$hostname,
	$port,
	$username,
	$password,
	$servicename,
	$facility,
	$ident);

# Main ------------------------------------------------------------------------

my $xml 	= param("xml");
my @tmpstat	= split(/,,,/,$xml);
my $transid	= $tmpstat[1];

# Read configuration
my $Config = XML::Smart->new($config_file) or 
	Stop("Cannot open configuration file; Exit: $?");

openlog($ident,'',$facility);

my $Con			
= new Net::Jabber::Client(debuglevel=>0,debugfile=>"stdout");

read_configuration();

unless($xml)
 {
  Stop("No xml-stream found");
 }
else
 {
  syslog("notice","Got a response <stream> (but not recorded)");
 }

=head2

=over 4

=item * Connect to the notification jabber account

=item * Send xml stream to aspsms.domain.tld/notification via jabber

=back

=cut

my $ret_connect_status 	= 	connect_client();

unless($ret_connect_status == 0)
 { Stop("Internal aspsms-t problem"); }

my $ret_send_message = send_xml_to_aspsmst($xml);

Stop($ret_send_message);

# Functions --------------------------------------------------------------------

sub read_configuration
 {

=head2 read_configuration()

Read xml configuration from aspsms.xml

=cut

  $hostname	= $Config->{aspsms}{notification}{hostname};
  $port		= $Config->{aspsms}{notification}{port};
  $username	= $Config->{aspsms}{notification}{username};
  $password	= $Config->{aspsms}{notification}{password};
  $servicename	= $Config->{aspsms}{jabber}{serviceid};
  $facility	= $Config->{aspsms}{facility};
  $ident	= $Config->{aspsms}{ident};
 } ### END of read_configuration();

sub http_response
 {
  my $ident 	= shift;
  my $xml	= shift;
  my $status	= shift;

=head2 http_response()

Print read xml stream to the web browser or connected socket

=cut

  print "Content-Type: text/xml

<?xml version=\'1.0\'?>
<aspsms>
 <ident>$ident</ident>
 <stream>$xml</stream>
 <reply>
  <status>$status</status>
 </reply>
</aspsms>";

} ### END of http_response();

sub connect_client {

=head2 connect_client()

This function connects to the configured jabber account

=cut

eval {

$Con->Connect(
                hostname                => $hostname,
                port                    => $port,
                timeout                 => "5"
              );

};

if($@)
 { Stop("Problem to connect jabber-server"); }

unless($transid)
 { Stop("Problem with given stream (Values missing?)"); }

my @ret_auth = $Con->AuthIQAuth (
                 username=>      $username,
                 password=>      $password,
                 resource=>      $transid
               );

unless($ret_auth[0] eq "ok")
 { return $ret_auth[0]; }

$Con->PresenceSend();
$Con->RosterGet();

return 0;
} # end sub connect_client()

sub send_xml_to_aspsmst
 {
  my $xml_send = shift;
  my $msg = new Net::Jabber::Message();

=head2 send_xml_to_aspsmst()

This function send the xml stream to aspsms.domain.tld/notification

=cut

  eval 
   {
  $msg->SetMessage(type    =>"message",
                   to      =>$servicename."/notification",
                   body    =>"$xml_send");
  $Con->Send($msg);
   };

  if($@)
   {
    Stop("Problem to send the notification jabber message");
   }

Stop("Successfully accepted");
} ### END of send_xml_to_aspsmst

sub Stop 
 {
  my $ret = shift;

=head2 Stop()

This function shutdown the jabber connection and calls http_response()

=cut

  eval
  {
   $Con->Disconnect;
  };

  if($@)
   { }

  http_response($ident,
		$xml,
		$ret);

  syslog('notice',"$ret");

  print "\n";

  exit(0);
 } ### Stop()

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2006-2012 Marco Balmer <marco@balmer.name>

The Debian packaging is licensed under the 
GPL, see `/usr/share/common-licenses/GPL-2'.

=cut
